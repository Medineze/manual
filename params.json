{
  "name": "Manual",
  "tagline": "Documentación viva de nuestra metodología de trabajo.",
  "body": "# Manual\r\n\r\nEste es un documento vivo que describe workflows, herramientas y otras yerbas en torno a nuestra forma de trabajar desde el desarrollo hasta la implementación continua.\r\n\r\nLa idea es documentar el estado y evolución de nuestra metodología como referencia interna del equipo y al mismo tiempo compartir nuestras estrategias con todo aquel que quiera aprovecharlas, discutirlas, etc.\r\n\r\nElijo este formato en lugar de utilizar un wiki por dos motivos:\r\n+ Permite apreciar la evolución histórica del documento.\r\n+ Resulta conveniente y oportuno para ejercitar nuestro workflow basado en github.\r\n\r\n## Objetivo\r\n\r\nNos proponemos adoptar mejores prácticas, procesos, cultura y metodología tomados del movimiento open source para aplicarlos al desarrollo de software en el sector público.\r\n\r\nDe manera similar a como el movimiento [inner source](http://paypal.github.io/InnerSourceCommons/index.html) refrezca las prácticas en las empresas privadas en posde  aumentar su eficiencia y calidad, nos valemos de estos recursos para ganar en economía, agilidad y calidad en el estado.\r\n\r\n## Filosofía\r\n\r\n> “Escribe programas que hagan una cosa y la hagan bien, que trabajen en armonía con \r\n> otros y que manejen flujos de texto, pues esta es una interfaz universal.” – Doug Mcllroy\r\n\r\n## Entrega contínua\r\n\r\n## Operaciones\r\n\r\nLa consigna es \"automatizarlo todo\". \r\n\r\nExpresamos la infraestructura como código para ganar en reproducibilidad e integrar su evolución a nuestro flujo de trabajo cotidiano.\r\n\r\nCultivamos la estrategia chat ops, tanto como herramienta de automatización como para mantener a todo el equipo en una misma página.\r\n\r\nNuestro equipo de operaciones no hace prácticamente nada sobre la infraestructura en si misma. Su trabajo consiste en diseñarla y programar a Juanito (nuestro chat bot basado en hubot) para que haga el trabajo duro por nosotros.![Diagrama de prueba](https://cdn.rawgit.com/MinEduTDF/manual/master/datacenter.mmd.png)\r\n\r\n\r\n## Arquitectura\r\n\r\nActualmente se presentan dos tipos de aplicaciones monolíticas bién diferenciados:\r\n\r\n* Aplicaciones programadas desde cero, sin utilizar librerías ni patrones de diseño como MVC, ORM, etc.\r\n* Aplicaciones basadas en framework MVC más plugins.\r\n\r\n![Diagrama de prueba](https://cdn.rawgit.com/MinEduTDF/manual/master/monolitos.mmd.png)\r\n*El usuario interactua con una diversidad de interfaces.*\r\n\r\nEl objetivo es desarrollar una migración progresiva hacia una arquitectura de microservicios fuertemente modularizada. Que se apoye sobre una gestión automatizada de dependencias y que presente al usuario una única interface que integra de manera transparente todos los servicios.\r\n\r\nEsto favorece la manejabilidad de los proyectos al dividirlos en módulos pequeños, bién documentados y testeados y agiliza las operaciones al tiempo que optimiza la utilización de recursos materiales.\r\n\r\n![Diagrama de prueba](https://cdn.rawgit.com/MinEduTDF/manual/master/microservicios.mmd.png)\r\n*Todos los servicios se integran en una única interface simplificando la tarea del usuario.*\r\n\r\n## Dependencias\r\n\r\n## Guías de estilo\r\n\r\n## Documentación\r\n\r\n## Tests\r\n\r\n## Control de calidad\r\n\r\n## Workflow\r\n\r\n* 1º- Le pedimos a Juanito que nos prepare un pipeline de entrega contínua para alguno de los siguientes tipos de proyectos:\r\n    \r\n  * Módulo javascript.\r\n  * Aplicación javascript.\r\n  * Módulo php.\r\n  * Aplicación php.\r\n  * Módulo hubot.\r\n\r\n* 2º- Unos segundos después, Juanito nos provee la url del nuevo repositorio junto con instrucciones para empezar a trabajar.\r\n\r\n* 3º- Clonamos el repositorio.\r\n\r\n* 4º- Instalamos dependencias.\r\n\r\n* 5º- Creamos un branch de nombre descriptivo.\r\n\r\n* 6º- Codeamos actualizando tests y documentación para reflejar los cambios.\r\n\r\n* 7º- Ejecutamos git push originnombredelbranch.\r\n\r\n* 8º- Se ejecutan una serie de validaciones automáticas.\r\n\r\n* 9º- Se crea pull request.\r\n\r\n* 10º- Se valida el ódigo en el [travis.ci](servidor de integración).\r\n\r\n* 11º- Si todo anduvo bién, Juanito avisa a los responsables de realizar la revisión de pares.\r\n\r\n* 12º- Una vez aprobada la pull request se publica una nueva versión, respetando versionado semántico, que se pone en producción automáticamente.\r\n\r\n* 13º- Juanito avisa que se ha publicado una nueva versión y felicita al autor.\r\n\r\n## Diseño / Experiencia de usuario\r\n\r\n## Código de conducta\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}